<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.library.dao.BookMapper">
    <resultMap id="BookResultMap" type="com.library.entity.Book">
        <id property="id" column="id"/>
        <result property="bookNumber" column="book_number"/>
        <result property="name" column="name"/>
        <result property="author" column="author"/>
        <result property="publisher" column="publisher"/>
        <result property="publishDate" column="publish_date"/>
        <result property="category" column="category"/>
        <result property="price" column="price"/>
        <result property="stock" column="stock"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <!-- 添加图书 -->
    <insert id="insertBook" parameterType="com.library.entity.Book">
        INSERT INTO book (book_number, name, author, publisher, publish_date, category, price, stock, create_time, update_time)
        VALUES (#{bookNumber}, #{name}, #{author}, #{publisher}, #{publishDate}, #{category}, #{price}, #{stock}, now(), now())
    </insert>

    <!-- 删除图书 -->
    <delete id="deleteBook" parameterType="java.lang.Integer">
        DELETE FROM book WHERE id = #{id}
    </delete>

    <!-- 更新图书信息 -->
    <update id="updateBook" parameterType="com.library.entity.Book">
        UPDATE book
        SET book_number = #{bookNumber},
            name = #{name},
            author = #{author},
            publisher = #{publisher},
            publish_date = #{publishDate},
            category = #{category},
            price = #{price},
            stock = #{stock},
            update_time = now()
        WHERE id = #{id}
    </update>

    <!-- 根据ID查询图书 -->
    <select id="getBookById" resultMap="BookResultMap">
        SELECT * FROM book WHERE id = #{id}
    </select>

    <!-- 查询所有图书 -->
    <select id="getAllBooks" resultMap="BookResultMap">
        SELECT * FROM book ORDER BY create_time DESC
    </select>

    <!-- 搜索图书 -->
    <select id="searchBooks" resultMap="BookResultMap">
        SELECT * FROM book
        WHERE name LIKE CONCAT('%', #{keyword}, '%')
        OR author LIKE CONCAT('%', #{keyword}, '%')
        OR publisher LIKE CONCAT('%', #{keyword}, '%')
        OR category LIKE CONCAT('%', #{keyword}, '%')
        ORDER BY create_time DESC
    </select>

    <!-- 关键字+分类联合搜索 -->
    <select id="searchBooksByKeywordAndCategory" resultMap="BookResultMap">
        SELECT * FROM book
        WHERE 1=1
            <if test="keyword != null and keyword != ''">
                AND (
                    name LIKE CONCAT('%', #{keyword}, '%')
                    OR author LIKE CONCAT('%', #{keyword}, '%')
                    OR publisher LIKE CONCAT('%', #{keyword}, '%')
                    OR book_number LIKE CONCAT('%', #{keyword}, '%')
                )
            </if>
            <if test="category != null and category != '' and category != '选择分类'">
                AND category LIKE CONCAT(#{category}, '%')
            </if>
        ORDER BY create_time DESC
    </select>

    <!-- 更新库存 -->
    <update id="updateStock">
        UPDATE book SET stock = #{stock}, update_time = now()
        WHERE id = #{id}
    </update>

    <!-- 分页查询图书 -->
    <select id="getBooksByPage" resultMap="BookResultMap">
        SELECT * FROM book
        ORDER BY create_time DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 获取图书总数 -->
    <select id="getTotalBooks" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM book
    </select>

    <!-- 查询某分类下最大的图书序号 -->
    <select id="getMaxBookNumberByPrefix" resultType="java.lang.String">
        SELECT MAX(book_number) FROM book WHERE book_number LIKE CONCAT(#{prefix}, '%')
    </select>

    <!-- 新书上架榜：近90天上架且借阅次数多，前5 -->
    <select id="getNewBooksRank" resultMap="BookResultMap">
        SELECT b.*, IFNULL(br.borrow_count,0) AS borrowCount
        FROM book b
        LEFT JOIN (
            SELECT book_id, COUNT(*) AS borrow_count
            FROM borrow_record
            GROUP BY book_id
        ) br ON b.id = br.book_id
        WHERE b.create_time >= DATE_SUB(NOW(), INTERVAL 90 DAY)
        ORDER BY borrowCount DESC, b.create_time DESC
        LIMIT 5
    </select>

    <!-- 分类榜单：每个分类下借阅次数最多的前5本书（MySQL 8.0+支持窗口函数） -->
    <select id="getCategoryRank" resultMap="BookResultMap">
        SELECT * FROM (
            SELECT b.*, IFNULL(br.borrow_count,0) AS borrowCount,
                   ROW_NUMBER() OVER(PARTITION BY b.category ORDER BY IFNULL(br.borrow_count,0) DESC, b.create_time DESC) AS rn
            FROM book b
            LEFT JOIN (
                SELECT book_id, COUNT(*) AS borrow_count FROM borrow_record GROUP BY book_id
            ) br ON b.id = br.book_id
        ) t
        WHERE t.rn &lt;= 5
        ORDER BY t.category, t.rn
    </select>
</mapper>
